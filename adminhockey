<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sports Match Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <style>
        body {
            font-family: 'Arial', sans-serif;
            margin: 0;
            padding: 0;
            background-color: #fff;
            color: #2c6e49;
        }
        body::after {
            content: ""; /* Empty content for the watermark */
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-image: url('assests/logo.png'); /* Add your watermark image URL */
            background-position: center;
            background-repeat: no-repeat;
            background-size: contain; /* Adjust the image size to fit the page */
            opacity: 0.1; /* Adjust opacity to make the watermark subtle */
            pointer-events: none; /* Ensure the watermark doesnâ€™t interfere with clicks on the page */
            z-index: -1; /* Keeps the watermark behind the text */
        }
        /* Header Section */
.header1 {
    text-align: center;
    padding: 20px;
    background-color: #2e8b57; /* Green background */
    color: #fff; /* White text */
}

.header1 h1 {
    margin: 0;
    font-size: 2rem;
}

.header1 h2 {
    margin: 0;
    font-size: 1.5rem;
    margin-top: 5px;
}

        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 20px;
            background-color: #2c6e49; /* Dark green */
            color: #fff;
        }
        .header h1, .header .score {
            margin: 0;
        }
        .score {
            font-size: 2.5rem;
            font-weight: bold;
        }
        .stats table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }
        .stats table th, .stats table td {
            border: 1px solid #2c6e49;
            padding: 10px;
            text-align: center;
        }
        .stats table th {
            background-color: #2c6e49;
            color: #fff;
        }
        .actions-container {
            display: flex;
            justify-content: space-between;
            margin: 20px 0;
        }
        .actions {
            width: 48%;
        }
        .actions h3 {
            text-align: center;
            color: #2c6e49;
        }
        .actions button {
            width: 100%;
            margin: 5px 0;
            padding: 10px;
            background-color: #4b9b63; /* Green */
            border: none;
            border-radius: 5px;
            color: #fff;
            cursor: pointer;
        }
        .actions button:hover {
            background-color: #3b7a4b; /* Darker green */
        }
        .player-list {
            margin: 20px 0;
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
        }
        .player-list button {
            margin: 5px;
            padding: 10px;
            background-color: #4b9b63; /* Green */
            border: none;
            border-radius: 5px;
            color: #fff;
            cursor: pointer;
        }
        .player-list button:hover {
            background-color: #3b7a4b; /* Darker green */
        }
    </style>
    <script>
        const API_BASE_URL = "http://192.168.226.238:8000/api";
        let matchEvents = "";  // Initialize an empty string to store match events

        function getQueryParams() {
            const params = new URLSearchParams(window.location.search);
            return { matchId: params.get('matchId') };
        }

        async function fetchMatchDetails() {
            const { matchId } = getQueryParams();
            if (!matchId) {
                alert("No matchId provided!");
                return;
            }
            try {
                const response = await axios.get(`${API_BASE_URL}/matches/${matchId}`);
                const match = response.data;

                document.getElementById("team1-name").textContent = match.team1;
                document.getElementById("team2-name").textContent = match.team2;
                document.getElementById("score").textContent = `${match.score1} - ${match.score2}`;

                document.getElementById("yellowcards-team1").textContent = match.yellowCards1;
                document.getElementById("yellowcards-team2").textContent = match.yellowCards2;
                document.getElementById("redcards-team1").textContent = match.redCards1;
                document.getElementById("redcards-team2").textContent = match.redCards2;
                document.getElementById("cornerkicks-team1").textContent = match.cornerKicks1;
                document.getElementById("cornerkicks-team2").textContent = match.cornerKicks2;
                document.getElementById("penalties-team1").textContent = match.penalties1;
                document.getElementById("penalties-team2").textContent = match.penalties2;

                window.playersTeam1 = match.playersTeam1;
                window.playersTeam2 = match.playersTeam2;
            } catch (error) {
                console.error("Error fetching match details:", error);
                alert("Unable to fetch match details.");
            }
        }

        async function handleActionButtonClick(team, statType) {
            const players = team === 'team1' ? window.playersTeam1 : window.playersTeam2;
            const playerListContainer = document.getElementById("player-list");
            playerListContainer.innerHTML = players
                .map(player => `
                    <button onclick="updateStat('${team}', '${statType}', '${player}')">
                        ${player}
                    </button>
                `)
                .join("");
        }

        async function updateStat(team, statType, player) {
    const { matchId } = getQueryParams();
    if (!matchId) return;

    // Get current stats from the DOM
    let currentScore1 = parseInt(document.getElementById("score").textContent.split(" - ")[0]);
    let currentScore2 = parseInt(document.getElementById("score").textContent.split(" - ")[1]);
    let yellowCards1 = parseInt(document.getElementById("yellowcards-team1").textContent);
    let yellowCards2 = parseInt(document.getElementById("yellowcards-team2").textContent);
    let redCards1 = parseInt(document.getElementById("redcards-team1").textContent);
    let redCards2 = parseInt(document.getElementById("redcards-team2").textContent);
    let cornerKicks1 = parseInt(document.getElementById("cornerkicks-team1").textContent);
    let cornerKicks2 = parseInt(document.getElementById("cornerkicks-team2").textContent);
    let penalties1 = parseInt(document.getElementById("penalties-team1").textContent);
    let penalties2 = parseInt(document.getElementById("penalties-team2").textContent);

    // Construct a grammatically correct event message
    let eventMessage = "";
    if (statType === "goals") {
        if (team === "team1") {
            currentScore1++;
            eventMessage = `${player} scored a goal!`;
        } else {
            currentScore2++;
            eventMessage = `${player} scored a goal!`;
        }
    } else if (statType === "yellowCards") {
        if (team === "team1") {
            yellowCards1++;
            eventMessage = `Yellow card to ${player}.`;
        } else {
            yellowCards2++;
            eventMessage = `Yellow card to ${player}.`;
        }
    } else if (statType === "redCards") {
        if (team === "team1") {
            redCards1++;
            eventMessage = `Red card to ${player}.`;
        } else {
            redCards2++;
            eventMessage = `Red card to ${player}.`;
        }
    } else if (statType === "cornerKicks") {
        if (team === "team1") {
            cornerKicks1++;
            eventMessage = `${player} won a penalty corner.`;
        } else {
            cornerKicks2++;
            eventMessage = `${player} won a penalty corner.`;
        }
    } else if (statType === "penalties") {
        if (team === "team1") {
            penalties1++;
            eventMessage = `${player} earned a penalty stroke.`;
        } else {
            penalties2++;
            eventMessage = `${player} earned a penalty stroke.`;
        }
    }
    else if (statType === "freeHits") {
    if (team === "team1") {
        const freeHits1 = parseInt(document.getElementById("freehit-team1").textContent) + 1;
        document.getElementById("freehit-team1").textContent = freeHits1;
        eventMessage = `${player} earned a Free Hit for Team 1.`;
    } else {
        const freeHits2 = parseInt(document.getElementById("freehit-team2").textContent) + 1;
        document.getElementById("freehit-team2").textContent = freeHits2;
        eventMessage = `${player} earned a Free Hit for Team 2.`;
    }
    }


    // Append the event to the matchEvents string with a line break
    matchEvents += eventMessage + "<br>";  // Append event with a line break for separation

    // Display the match events
    document.getElementById("match-events").innerHTML = matchEvents;

    try {
        // Send updated stats to the server
        const response = await axios.put(`${API_BASE_URL}/matches/${matchId}`, {
            score1: currentScore1,
            score2: currentScore2,
            yellowCards1,
            yellowCards2,
            redCards1,
            redCards2,
            cornerKicks1,
            cornerKicks2,
            penalties1,
            penalties2,
            freeHits1: parseInt(document.getElementById("freehit-team1").textContent),
            freeHits2: parseInt(document.getElementById("freehit-team2").textContent),
            matchEvents: matchEvents  // Include matchEvents in the update
        });

        if (response.status === 200) {
            alert(`${statType} updated for ${player} in ${team}`);
            fetchMatchDetails(); // Refresh match details
        } else {
            alert("Failed to update the match.");
        }
    } catch (error) {
        console.error("Error updating stats:", error);
        alert("Unable to update stats.");
    }
}


        window.onload = () => {
            fetchMatchDetails();
            setInterval(fetchMatchDetails, 3000);
        };
    </script>
</head>
<body>
    <div class="header1 align-items-center">
        <div class="d-flex align-items-center">
            <!-- Logo on the left side -->
            <img src="assests/logo.png" alt="TCE Logo" class="img-fluid" style="max-height: 70px;">
            <div class="ms-3 text-center w-100"> <!-- ms-3 is a Bootstrap class to add margin-left -->
                <h1 class="h3 mb-0">Thiagarajar College of Engineering</h1>
                <h2 class="h5 mb-0">Department of Physical Education</h2>
            </div>
        </div>
    </div>
    <br>
    <div class="header">
        <h1 id="team1-name">Team 1</h1>
        <div class="score" id="score">0 - 0</div>
        <h1 id="team2-name">Team 2</h1>
    </div>

    <div class="stats">
        <table>
            <thead>
                <tr>
                    <th>Stat</th>
                    <th>Team 1</th>
                    <th>Team 2</th>
                </tr>
            </thead>
            <tbody>
                <tr><td>Yellow Cards</td><td id="yellowcards-team1">0</td><td id="yellowcards-team2">0</td></tr>
                <tr><td>Red Cards</td><td id="redcards-team1">0</td><td id="redcards-team2">0</td></tr>
                <tr><td>Penalty Corner</td><td id="cornerkicks-team1">0</td><td id="cornerkicks-team2">0</td></tr>
                <tr><td>Penalty Stroke</td><td id="penalties-team1">0</td><td id="penalties-team2">0</td></tr>
                <tr><td>Free Hit</td><td id="freehit-team1">0</td><td id="freehit-team2">0</td></tr> 
            </tbody>
        </table>
    </div>

    <div class="actions-container">
        <div class="actions">
            <h3>Actions for Team 1</h3>
            <button onclick="handleActionButtonClick('team1', 'goals')">Goal</button>
            <button onclick="handleActionButtonClick('team1', 'yellowCards')">Yellow Card</button>
            <button onclick="handleActionButtonClick('team1', 'redCards')">Red Card</button>
            <button onclick="handleActionButtonClick('team1', 'cornerKicks')">Penalty Corner</button>
            <button onclick="handleActionButtonClick('team1', 'penalties')">Penalty stroke</button>
            <button onclick="handleActionButtonClick('team1', 'freeHits')">Free Hit</button>
        </div>
        <div class="actions">
            <h3>Actions for Team 2</h3>
            <button onclick="handleActionButtonClick('team2', 'goals')">Goal</button>
            <button onclick="handleActionButtonClick('team2', 'yellowCards')">Yellow Card</button>
            <button onclick="handleActionButtonClick('team2', 'redCards')">Red Card</button>
            <button onclick="handleActionButtonClick('team2', 'cornerKicks')">Penalty Corner</button>
            <button onclick="handleActionButtonClick('team2', 'penalties')">Penalty stroke</button>
            <button onclick="handleActionButtonClick('team2', 'freeHits')">Free Hit</button>
        </div>
    </div>

    <div class="player-list" id="player-list"></div>

    <div class="stats">
        <h3>Match Events</h3>
        <p id="match-events">No events yet</p>
    </div>
</body>
</html>
